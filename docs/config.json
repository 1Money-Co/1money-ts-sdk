{
  "openapi": "3.1.0",
  "info": {
    "title": "om-protocol",
    "description": "1Money Network Protocol",
    "license": {
      "name": "GPL-3.0",
      "identifier": "GPL-3.0"
    },
    "version": "0.1.0"
  },
  "servers": [
    {
      "url": "https://api.testnet.1money.network",
      "description": "Testnet API server"
    },
    {
      "url": "https://api.1money.network",
      "description": "Mainnet API server"
    },
    {
      "url": "http://localhost:18555",
      "description": "Local API server"
    }
  ],
  "paths": {
    "/v1/accounts/nonce": {
      "get": {
        "tags": [
          "accounts"
        ],
        "operationId": "get_account_nonce",
        "parameters": [
          {
            "name": "address",
            "in": "query",
            "description": "Address of the account to lookup nonce for",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "0x9E1E9688A44D058fF181Ed64ddFAFbBE5CC74ff3"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountInfo"
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESTErrorData"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESTErrorData"
                }
              }
            }
          }
        }
      }
    },
    "/v1/accounts/token_account": {
      "get": {
        "tags": [
          "accounts"
        ],
        "operationId": "get_associated_token_account",
        "parameters": [
          {
            "name": "address",
            "in": "query",
            "description": "Address of the account to lookup associated token account for",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "0x9E1E9688A44D058fF181Ed64ddFAFbBE5CC74ff3"
          },
          {
            "name": "token",
            "in": "query",
            "description": "Token address to lookup associated token account for",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "0x2cd8999Be299373D7881f4aDD11510030ad1412F"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociatedTokenAccount"
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESTErrorData"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESTErrorData"
                }
              }
            }
          }
        }
      }
    },
    "/v1/checkpoints/by_hash": {
      "get": {
        "tags": [
          "checkpoints"
        ],
        "operationId": "get_by_hash",
        "parameters": [
          {
            "name": "hash",
            "in": "query",
            "description": "hash of the checkpoint to lookup",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "full",
            "in": "query",
            "description": "Full transaction details",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkpoint"
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESTErrorData"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESTErrorData"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESTErrorData"
                }
              }
            }
          }
        }
      }
    },
    "/v1/checkpoints/by_number": {
      "get": {
        "tags": [
          "checkpoints"
        ],
        "operationId": "get_by_number",
        "parameters": [
          {
            "name": "number",
            "in": "query",
            "description": "Number of the checkpoint to lookup",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "50"
          },
          {
            "name": "full",
            "in": "query",
            "description": "Full transaction details",
            "required": true,
            "schema": {
              "type": "boolean"
            },
            "example": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkpoint"
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESTErrorData"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESTErrorData"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESTErrorData"
                }
              }
            }
          }
        }
      }
    },
    "/v1/checkpoints/number": {
      "get": {
        "tags": [
          "checkpoints"
        ],
        "operationId": "get_number",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckpointNumber"
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESTErrorData"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESTErrorData"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tokens/blacklist": {
      "post": {
        "tags": [
          "tokens"
        ],
        "operationId": "set_blacklist",
        "requestBody": {
          "description": "token blacklist request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenBlacklistRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Hash"
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESTErrorData"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESTErrorData"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESTErrorData"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tokens/burn": {
      "post": {
        "tags": [
          "tokens"
        ],
        "operationId": "burn_token",
        "requestBody": {
          "description": "token burn request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenBurnRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Hash"
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESTErrorData"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESTErrorData"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESTErrorData"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tokens/grant_authority": {
      "post": {
        "tags": [
          "tokens"
        ],
        "operationId": "grant_authority",
        "requestBody": {
          "description": "token authority request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenAuthorityRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Hash"
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESTErrorData"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESTErrorData"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESTErrorData"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tokens/issue": {
      "post": {
        "tags": [
          "tokens"
        ],
        "operationId": "issue_new_token",
        "requestBody": {
          "description": "token issue request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenIssueRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HashWithToken"
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESTErrorData"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESTErrorData"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESTErrorData"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tokens/mint": {
      "post": {
        "tags": [
          "tokens"
        ],
        "operationId": "mint_token",
        "requestBody": {
          "description": "token mint request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenMintRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Hash"
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESTErrorData"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESTErrorData"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESTErrorData"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tokens/pause": {
      "post": {
        "tags": [
          "tokens"
        ],
        "operationId": "pause_token",
        "requestBody": {
          "description": "token pause request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenPauseRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Hash"
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESTErrorData"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESTErrorData"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESTErrorData"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tokens/token_metadata": {
      "get": {
        "tags": [
          "tokens"
        ],
        "operationId": "get_mint_account",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Token address to lookup metadata for",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "0x2cd8999Be299373D7881f4aDD11510030ad1412F"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MintInfo"
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESTErrorData"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESTErrorData"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tokens/update_metadata": {
      "post": {
        "tags": [
          "tokens"
        ],
        "operationId": "update_metadata",
        "requestBody": {
          "description": "token metadata request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenMetadataRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Hash"
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESTErrorData"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESTErrorData"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESTErrorData"
                }
              }
            }
          }
        }
      }
    },
    "/v1/transactions/by_hash": {
      "get": {
        "tags": [
          "transactions"
        ],
        "operationId": "get_by_hash",
        "parameters": [
          {
            "name": "hash",
            "in": "query",
            "description": "hash of the checkpoint to lookup",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESTErrorData"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESTErrorData"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESTErrorData"
                }
              }
            }
          }
        }
      }
    },
    "/v1/transactions/cancellation": {
      "post": {
        "tags": [
          "transactions"
        ],
        "operationId": "cancel",
        "requestBody": {
          "description": "transaction cancel request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelTransactionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Hash"
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESTErrorData"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESTErrorData"
                }
              }
            }
          }
        }
      }
    },
    "/v1/transactions/estimate_fee": {
      "get": {
        "tags": [
          "transactions"
        ],
        "operationId": "estimate_fee",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "address of the transaction author",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "token",
            "in": "query",
            "description": "token address to lookup balance for",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "query",
            "description": "value of the transaction",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EstimateFee"
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESTErrorData"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESTErrorData"
                }
              }
            }
          }
        }
      }
    },
    "/v1/transactions/payment": {
      "post": {
        "tags": [
          "transactions"
        ],
        "operationId": "payment",
        "requestBody": {
          "description": "transaction request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentTransactionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Hash"
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESTErrorData"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESTErrorData"
                }
              }
            }
          }
        }
      }
    },
    "/v1/transactions/receipt/by_hash": {
      "get": {
        "tags": [
          "transactions"
        ],
        "operationId": "get_receipt_by_hash",
        "parameters": [
          {
            "name": "hash",
            "in": "query",
            "description": "hash of the checkpoint to lookup",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionReceipt"
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESTErrorData"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESTErrorData"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESTErrorData"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccountInfo": {
        "type": "object",
        "description": "The account information.",
        "required": [
          "nonce"
        ],
        "properties": {
          "nonce": {
            "type": "integer",
            "format": "int64",
            "description": "The nonce of the account.",
            "example": 0,
            "minimum": 0
          }
        }
      },
      "AddressSchema": {
        "type": "string",
        "title": "string",
        "example": "0x9E1E9688A44D058fF181Ed64ddFAFbBE5CC742Ab"
      },
      "AssociatedTokenAccount": {
        "type": "object",
        "description": "Represents the token holdings and associated data for a specific address.",
        "required": [
          "token_account_address",
          "balance",
          "nonce"
        ],
        "properties": {
          "balance": {
            "$ref": "#/components/schemas/U256Schema",
            "description": "The balance of the token."
          },
          "nonce": {
            "type": "integer",
            "format": "int64",
            "description": "The nonce of the owner account.",
            "example": 0,
            "minimum": 0
          },
          "token_account_address": {
            "$ref": "#/components/schemas/AddressSchema",
            "description": "The address that derived from the owner address and token address, we\ncall it as the associated token account address."
          }
        }
      },
      "AuthorityAction": {
        "type": "string",
        "enum": [
          "Grant",
          "Revoke"
        ]
      },
      "AuthorityType": {
        "type": "string",
        "enum": [
          "MasterMint",
          "MintTokens",
          "Pause",
          "Burn",
          "Blacklist",
          "UpdateMetadata"
        ]
      },
      "B256Schema": {
        "type": "string",
        "title": "string",
        "example": "0xf55f9525be94633b56f954d3252d52b8ef42f5fd5f9491b243708471c15cc40c"
      },
      "BlacklistAction": {
        "type": "string",
        "enum": [
          "Blacklist",
          "Whitelist"
        ]
      },
      "BlockTransactions": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            },
            "description": "Full transactions"
          },
          {
            "$ref": "#/components/schemas/B256Schema",
            "description": "Only hashes"
          }
        ],
        "description": "Block Transactions depending on the boolean attribute of `getCheckpointBy*`."
      },
      "BytesSchema": {
        "type": "string",
        "title": "hex string",
        "example": "0x2efae2eb"
      },
      "CancelTransactionRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CancellationPayload"
          },
          {
            "type": "object",
            "required": [
              "signature"
            ],
            "properties": {
              "signature": {
                "$ref": "#/components/schemas/RestSignature",
                "description": "The signature of the transaction."
              }
            }
          }
        ],
        "description": "Represents the cancellation transaction request to/from REST.\n\nThis type is used to decode the cancellation request from REST."
      },
      "CancellationPayload": {
        "type": "object",
        "required": [
          "chain_id",
          "nonce"
        ],
        "properties": {
          "chain_id": {
            "type": "integer",
            "format": "int64",
            "description": "The chain id of the transaction.",
            "minimum": 0
          },
          "nonce": {
            "type": "integer",
            "format": "int64",
            "description": "The nonce of the transaction.",
            "minimum": 0
          }
        }
      },
      "Checkpoint": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Header",
            "description": "Header of the block."
          },
          {
            "type": "object",
            "required": [
              "transactions"
            ],
            "properties": {
              "size": {
                "type": "integer",
                "format": "int64",
                "description": "Integer the size of this block in bytes.",
                "minimum": 0
              },
              "transactions": {
                "$ref": "#/components/schemas/BlockTransactions",
                "description": "Block Transactions."
              }
            }
          }
        ]
      },
      "CheckpointNumber": {
        "type": "object",
        "required": [
          "number"
        ],
        "properties": {
          "number": {
            "type": "integer",
            "format": "int64",
            "example": 50,
            "minimum": 0
          }
        }
      },
      "EstimateFee": {
        "type": "object",
        "required": [
          "fee"
        ],
        "properties": {
          "fee": {
            "type": "string",
            "example": "1500000000"
          }
        }
      },
      "Hash": {
        "type": "object",
        "required": [
          "hash"
        ],
        "properties": {
          "hash": {
            "$ref": "#/components/schemas/B256Schema"
          }
        }
      },
      "HashWithToken": {
        "type": "object",
        "description": "Represents a transaction hash and the token that created by the transaction.",
        "required": [
          "hash",
          "token"
        ],
        "properties": {
          "hash": {
            "$ref": "#/components/schemas/B256Schema",
            "description": "The hash of the transaction."
          },
          "token": {
            "$ref": "#/components/schemas/TokenAddressSchema",
            "description": "The token that created by the transaction, only works for issuing new\ntokens."
          }
        }
      },
      "Header": {
        "type": "object",
        "description": "Block header representation.",
        "required": [
          "hash",
          "parent_hash",
          "state_root",
          "transactions_root",
          "receipts_root",
          "number",
          "timestamp",
          "extra_data"
        ],
        "properties": {
          "extra_data": {
            "type": "string",
            "description": "Extra data"
          },
          "hash": {
            "$ref": "#/components/schemas/B256Schema",
            "description": "Hash of the block"
          },
          "number": {
            "type": "integer",
            "format": "int64",
            "description": "Block number",
            "example": "1500",
            "minimum": 0
          },
          "parent_hash": {
            "$ref": "#/components/schemas/B256Schema",
            "description": "Hash of the parent"
          },
          "receipts_root": {
            "$ref": "#/components/schemas/B256Schema",
            "description": "Transactions receipts root hash"
          },
          "state_root": {
            "$ref": "#/components/schemas/B256Schema",
            "description": "State root hash"
          },
          "timestamp": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp",
            "example": "1739760890",
            "minimum": 0
          },
          "transactions_root": {
            "$ref": "#/components/schemas/B256Schema",
            "description": "Transactions root hash"
          }
        }
      },
      "KeyValuePair": {
        "type": "object",
        "required": [
          "key",
          "value"
        ],
        "properties": {
          "key": {
            "type": "string",
            "description": "The key of the additional metadata.",
            "example": "key1"
          },
          "value": {
            "type": "string",
            "description": "The value of the additional metadata.",
            "example": "v1"
          }
        }
      },
      "MetaDataKeyValuePair": {
        "type": "object",
        "description": "The additional key-value properties for one token.",
        "required": [
          "key",
          "value"
        ],
        "properties": {
          "key": {
            "type": "string",
            "example": "owner"
          },
          "value": {
            "type": "string",
            "example": "1Money"
          }
        }
      },
      "MintInfo": {
        "type": "object",
        "description": "`MintInfo` is the struct for token contract. One mint account represents one\ntoken.",
        "required": [
          "symbol",
          "master_authority",
          "master_mint_authority",
          "minter_authorities",
          "pause_authority",
          "burn_authorities",
          "black_list_authorities",
          "black_list",
          "metadata_update_authority",
          "supply",
          "decimals",
          "is_paused",
          "meta"
        ],
        "properties": {
          "black_list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddressSchema"
            },
            "description": "A blacklist of token accounts"
          },
          "black_list_authorities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddressSchema"
            },
            "description": "The authorities to blacklist/whitelist malicious accounts"
          },
          "burn_authorities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddressSchema"
            },
            "description": "The collection of authorities to burn tokens"
          },
          "decimals": {
            "type": "integer",
            "format": "int32",
            "description": "Number of base 10 digits to the right of the decimal place.",
            "example": 18,
            "minimum": 0
          },
          "is_paused": {
            "type": "boolean",
            "description": "`true` if all transactions for this token are paused",
            "example": false
          },
          "master_authority": {
            "$ref": "#/components/schemas/AddressSchema",
            "description": "`master_authority` used to create new tokens. The `master_authority` can\nbe provided if and only if during token creation. If `master_authority`\nis `EMPTY_ADDRESS`, the token hasn't been initialized. When the token is\ninitialized with `master_authority`, only the `master_authority` can\ngrant other role authorities to others. And the `master_authority`\nserves as the identifier address for the token. All token account's mint\nfield will be associated with the mint's `master_authority`."
          },
          "master_mint_authority": {
            "$ref": "#/components/schemas/AddressSchema",
            "description": "The authority that can grant individual `minter_authorities`. The\n`master_mint_authority` is created by `master_authority`, which delegate\nthe mint authority to other accounts."
          },
          "meta": {
            "$ref": "#/components/schemas/TokenMetadata",
            "description": "Metadata of the token"
          },
          "metadata_update_authority": {
            "$ref": "#/components/schemas/AddressSchema",
            "description": "The authority for updating the metadata"
          },
          "minter_authorities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MinterAllowance"
            },
            "description": "The collection of authorities to mint tokens with a given allowance. If\nthe allowance is used up, the authority is not able to mint any more\ntokens until the allowance is updated."
          },
          "pause_authority": {
            "$ref": "#/components/schemas/AddressSchema",
            "description": "The authority to pause/unpause token transactions."
          },
          "supply": {
            "$ref": "#/components/schemas/U256Schema",
            "description": "Total supply of tokens."
          },
          "symbol": {
            "type": "string",
            "description": "The symbol of the token. Created during token creation and cannot be\nchanged.",
            "example": "USD1"
          }
        }
      },
      "MinterAllowance": {
        "type": "object",
        "required": [
          "minter",
          "allowance"
        ],
        "properties": {
          "allowance": {
            "$ref": "#/components/schemas/U256Schema"
          },
          "minter": {
            "$ref": "#/components/schemas/AddressSchema"
          }
        }
      },
      "PauseAction": {
        "type": "string",
        "enum": [
          "Pause",
          "Unpause"
        ]
      },
      "PaymentPayload": {
        "type": "object",
        "required": [
          "chain_id",
          "nonce",
          "recipient",
          "value",
          "token"
        ],
        "properties": {
          "chain_id": {
            "type": "integer",
            "format": "int64",
            "description": "The chain id of the transaction.",
            "minimum": 0
          },
          "nonce": {
            "type": "integer",
            "format": "int64",
            "description": "The nonce of the transaction.",
            "minimum": 0
          },
          "recipient": {
            "$ref": "#/components/schemas/AddressSchema",
            "description": "The destination address of the transaction."
          },
          "token": {
            "$ref": "#/components/schemas/AddressSchema",
            "description": "The token address of the transaction."
          },
          "value": {
            "$ref": "#/components/schemas/U256Schema",
            "description": "The token value of the transaction to be transferred."
          }
        }
      },
      "PaymentTransactionRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentPayload"
          },
          {
            "type": "object",
            "required": [
              "signature"
            ],
            "properties": {
              "signature": {
                "$ref": "#/components/schemas/RestSignature",
                "description": "The signature of the transaction."
              }
            }
          }
        ],
        "description": "Represents token transfer transaction requests to/from REST."
      },
      "RESTErrorData": {
        "type": "object",
        "required": [
          "error_code",
          "message"
        ],
        "properties": {
          "error_code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "RestSignature": {
        "type": "object",
        "description": "Signature type for REST requests.\n\nWe use this type to avoid the ambiguity of the signature type in the core\nprimitives.",
        "required": [
          "r",
          "s",
          "v"
        ],
        "properties": {
          "r": {
            "$ref": "#/components/schemas/SignatureRSchema",
            "description": "The R field of the signature; the point on the curve."
          },
          "s": {
            "$ref": "#/components/schemas/SignatureSSchema",
            "description": "The S field of the signature; the point on the curve."
          },
          "v": {
            "type": "integer",
            "format": "int64",
            "description": "For EIP-155, EIP-2930 and Blob transactions this is set to the parity (0\nfor even, 1 for odd) of the y-value of the secp256k1 signature.\n\nFor legacy transactions, this is the recovery id\n\nSee also \u003Chttps://ethereum.github.io/execution-apis/api-documentation/\u003E and \u003Chttps://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactionbyhash\u003E",
            "example": "1",
            "minimum": 0
          }
        }
      },
      "SignatureRSchema": {
        "type": "string",
        "title": "string",
        "description": "Signature R schema",
        "example": "72956732934625920503481762689501378577921804342307439094906376029324416116949"
      },
      "SignatureSSchema": {
        "type": "string",
        "title": "string",
        "description": "Signature S schema",
        "example": "29902520081700531224291681396692026253288382272435451874524203378285409371412"
      },
      "TokenAddressSchema": {
        "type": "string",
        "title": "string",
        "example": "0x6ADE9688A44D058fF181Ed64ddFAFbBE5CC742Ac"
      },
      "TokenAuthorityPayload": {
        "type": "object",
        "required": [
          "chain_id",
          "nonce",
          "action",
          "authority_type",
          "authority_address",
          "token",
          "value"
        ],
        "properties": {
          "action": {
            "$ref": "#/components/schemas/AuthorityAction",
            "description": "The action of the transaction: Grant or Revoke."
          },
          "authority_address": {
            "$ref": "#/components/schemas/AddressSchema",
            "description": "The authority address to grant or revoke."
          },
          "authority_type": {
            "$ref": "#/components/schemas/AuthorityType",
            "description": "The authority type of the transaction: Mint, MintTokens, Pause, Burn,\nBlacklist, UpdateMetadata."
          },
          "chain_id": {
            "type": "integer",
            "format": "int64",
            "description": "The chain id of the transaction.",
            "example": 1212101,
            "minimum": 0
          },
          "nonce": {
            "type": "integer",
            "format": "int64",
            "description": "The nonce of the transaction.",
            "example": 0,
            "minimum": 0
          },
          "token": {
            "$ref": "#/components/schemas/TokenAddressSchema",
            "description": "The token address to operate."
          },
          "value": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/U256Schema",
                "description": "The allowance value of tokens to grant, only works for `MintTokens`\ntype."
              }
            ],
            "default": "0"
          }
        }
      },
      "TokenAuthorityRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TokenAuthorityPayload"
          },
          {
            "type": "object",
            "required": [
              "signature"
            ],
            "properties": {
              "signature": {
                "$ref": "#/components/schemas/RestSignature"
              }
            }
          }
        ]
      },
      "TokenBlacklistPayload": {
        "type": "object",
        "required": [
          "chain_id",
          "nonce",
          "action",
          "address",
          "token"
        ],
        "properties": {
          "action": {
            "$ref": "#/components/schemas/BlacklistAction",
            "description": "The action of the transaction: Blacklist or Whitelist."
          },
          "address": {
            "$ref": "#/components/schemas/AddressSchema",
            "description": "The address to be blacklisted or whitelisted."
          },
          "chain_id": {
            "type": "integer",
            "format": "int64",
            "description": "The chain id of the transaction.",
            "example": 1212101,
            "minimum": 0
          },
          "nonce": {
            "type": "integer",
            "format": "int64",
            "description": "The nonce of the transaction.",
            "example": 0,
            "minimum": 0
          },
          "token": {
            "$ref": "#/components/schemas/TokenAddressSchema",
            "description": "The token address of the transaction."
          }
        }
      },
      "TokenBlacklistRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TokenBlacklistPayload"
          },
          {
            "type": "object",
            "required": [
              "signature"
            ],
            "properties": {
              "signature": {
                "$ref": "#/components/schemas/RestSignature"
              }
            }
          }
        ]
      },
      "TokenBurnPayload": {
        "type": "object",
        "required": [
          "chain_id",
          "nonce",
          "recipient",
          "value",
          "token"
        ],
        "properties": {
          "chain_id": {
            "type": "integer",
            "format": "int64",
            "description": "The chain id of the transaction.",
            "example": 1212101,
            "minimum": 0
          },
          "nonce": {
            "type": "integer",
            "format": "int64",
            "description": "The nonce of the transaction.",
            "example": 0,
            "minimum": 0
          },
          "recipient": {
            "$ref": "#/components/schemas/AddressSchema",
            "description": "The address of the token to burn."
          },
          "token": {
            "$ref": "#/components/schemas/TokenAddressSchema",
            "description": "The token address of the transaction."
          },
          "value": {
            "$ref": "#/components/schemas/U256Schema",
            "description": "The amount of tokens to burn."
          }
        }
      },
      "TokenBurnRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TokenBurnPayload"
          },
          {
            "type": "object",
            "required": [
              "signature"
            ],
            "properties": {
              "signature": {
                "$ref": "#/components/schemas/RestSignature"
              }
            }
          }
        ]
      },
      "TokenIssuePayload": {
        "type": "object",
        "required": [
          "chain_id",
          "nonce",
          "symbol",
          "name",
          "decimals",
          "master_authority"
        ],
        "properties": {
          "chain_id": {
            "type": "integer",
            "format": "int64",
            "description": "The chain id of the transaction.",
            "example": 1212101,
            "minimum": 0
          },
          "decimals": {
            "type": "integer",
            "format": "int32",
            "description": "The decimals of the token.",
            "example": 8,
            "minimum": 0
          },
          "master_authority": {
            "$ref": "#/components/schemas/AddressSchema",
            "description": "The master authority of the token."
          },
          "name": {
            "type": "string",
            "description": "The name of the token.",
            "example": "TEST Stablecoin"
          },
          "nonce": {
            "type": "integer",
            "format": "int64",
            "description": "The nonce of the transaction.",
            "example": 0,
            "minimum": 0
          },
          "symbol": {
            "type": "string",
            "description": "The symbol of the token.",
            "example": "TEST"
          }
        }
      },
      "TokenIssueRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TokenIssuePayload"
          },
          {
            "type": "object",
            "required": [
              "signature"
            ],
            "properties": {
              "signature": {
                "$ref": "#/components/schemas/RestSignature"
              }
            }
          }
        ]
      },
      "TokenMetadata": {
        "type": "object",
        "description": "Token metadata for one token.",
        "required": [
          "name",
          "uri",
          "additional_metadata"
        ],
        "properties": {
          "additional_metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetaDataKeyValuePair"
            },
            "description": "must avoid storing the same key twice"
          },
          "name": {
            "type": "string",
            "description": "The longer name of the token",
            "example": "1Money Stable coin"
          },
          "uri": {
            "type": "string",
            "description": "The URI pointing to richer metadata",
            "example": "https://www.1moneynetwork.com/usdx.json"
          }
        }
      },
      "TokenMetadataPayload": {
        "type": "object",
        "required": [
          "chain_id",
          "nonce",
          "name",
          "uri",
          "token",
          "additional_metadata"
        ],
        "properties": {
          "additional_metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KeyValuePair"
            },
            "description": "The additional metadata of the token, can be blank list.",
            "example": "[{\"key1\":\"v1\",\"key2\":\"v2\"}]"
          },
          "chain_id": {
            "type": "integer",
            "format": "int64",
            "description": "The chain id of the transaction.",
            "example": 1212101,
            "minimum": 0
          },
          "name": {
            "type": "string",
            "description": "The name of the token.",
            "example": "TEST Stablecoin"
          },
          "nonce": {
            "type": "integer",
            "format": "int64",
            "description": "The nonce of the transaction.",
            "example": 0,
            "minimum": 0
          },
          "token": {
            "$ref": "#/components/schemas/TokenAddressSchema",
            "description": "The token address to set the metadata."
          },
          "uri": {
            "type": "string",
            "description": "The uri of the token.",
            "example": "https://test.com"
          }
        }
      },
      "TokenMetadataRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TokenMetadataPayload"
          },
          {
            "type": "object",
            "required": [
              "signature"
            ],
            "properties": {
              "signature": {
                "$ref": "#/components/schemas/RestSignature"
              }
            }
          }
        ]
      },
      "TokenMintPayload": {
        "type": "object",
        "required": [
          "chain_id",
          "nonce",
          "recipient",
          "value",
          "token"
        ],
        "properties": {
          "chain_id": {
            "type": "integer",
            "format": "int64",
            "description": "The chain id of the transaction.",
            "example": 1212101,
            "minimum": 0
          },
          "nonce": {
            "type": "integer",
            "format": "int64",
            "description": "The nonce of the transaction.",
            "example": 0,
            "minimum": 0
          },
          "recipient": {
            "$ref": "#/components/schemas/AddressSchema",
            "description": "The recipient address of the token mint to."
          },
          "token": {
            "$ref": "#/components/schemas/TokenAddressSchema",
            "description": "The token address of the transaction."
          },
          "value": {
            "$ref": "#/components/schemas/U256Schema",
            "description": "The amount of tokens to mint."
          }
        }
      },
      "TokenMintRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TokenMintPayload"
          },
          {
            "type": "object",
            "required": [
              "signature"
            ],
            "properties": {
              "signature": {
                "$ref": "#/components/schemas/RestSignature"
              }
            }
          }
        ]
      },
      "TokenPausePayload": {
        "type": "object",
        "required": [
          "chain_id",
          "nonce",
          "action",
          "token"
        ],
        "properties": {
          "action": {
            "$ref": "#/components/schemas/PauseAction",
            "description": "The action of the transaction: Pause or Unpause."
          },
          "chain_id": {
            "type": "integer",
            "format": "int64",
            "description": "The chain id of the transaction.",
            "example": 1212101,
            "minimum": 0
          },
          "nonce": {
            "type": "integer",
            "format": "int64",
            "description": "The nonce of the transaction.",
            "example": 0,
            "minimum": 0
          },
          "token": {
            "$ref": "#/components/schemas/TokenAddressSchema",
            "description": "The token address of the transaction."
          }
        }
      },
      "TokenPauseRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TokenPausePayload"
          },
          {
            "type": "object",
            "required": [
              "signature"
            ],
            "properties": {
              "signature": {
                "$ref": "#/components/schemas/RestSignature"
              }
            }
          }
        ]
      },
      "Transaction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TxPayload"
          },
          {
            "type": "object",
            "required": [
              "hash",
              "chain_id",
              "from",
              "nonce",
              "fee",
              "signature"
            ],
            "properties": {
              "chain_id": {
                "type": "integer",
                "format": "int64",
                "description": "The chain id of the transaction, if any.",
                "example": "21210",
                "minimum": 0
              },
              "checkpoint_hash": {
                "$ref": "#/components/schemas/B256Schema",
                "description": "Checkpoint hash"
              },
              "checkpoint_number": {
                "type": "integer",
                "format": "int64",
                "description": "Checkpoint number",
                "example": "10",
                "minimum": 0
              },
              "fee": {
                "type": "integer",
                "description": "Fee value",
                "example": "10",
                "minimum": 0
              },
              "from": {
                "$ref": "#/components/schemas/AddressSchema",
                "description": "Sender"
              },
              "hash": {
                "$ref": "#/components/schemas/B256Schema",
                "description": "Hash"
              },
              "nonce": {
                "type": "integer",
                "format": "int64",
                "description": "Nonce",
                "example": "10",
                "minimum": 0
              },
              "signature": {
                "$ref": "#/components/schemas/RestSignature",
                "description": "All _flattened_ fields of the transaction signature.\nNote: this is an option so special transaction types without a signature (e.g. \u003Chttps://github.com/ethereum-optimism/optimism/blob/0bf643c4147b43cd6f25a759d331ef3a2a61a2a3/specs/deposits.md#the-deposited-transaction-type\u003E) can be supported."
              },
              "transaction_index": {
                "type": "integer",
                "format": "int64",
                "description": "Transaction Index",
                "example": "10",
                "minimum": 0
              }
            }
          }
        ]
      },
      "TransactionReceipt": {
        "type": "object",
        "description": "Transaction receipt\nThis type is generic over an inner [`ReceiptEnvelope`] which contains\nconsensus data and metadata.",
        "required": [
          "success",
          "transaction_hash",
          "fee_used",
          "from"
        ],
        "properties": {
          "checkpoint_hash": {
            "$ref": "#/components/schemas/B256Schema",
            "description": "Hash of the checkpoint this transaction was included within."
          },
          "checkpoint_number": {
            "type": "integer",
            "format": "int64",
            "description": "Number of the checkpoint this transaction was included within.",
            "minimum": 0
          },
          "fee_used": {
            "type": "integer",
            "description": "Fee used",
            "minimum": 0
          },
          "from": {
            "$ref": "#/components/schemas/AddressSchema",
            "description": "Address of the sender"
          },
          "success": {
            "type": "boolean",
            "description": "If transaction is executed successfully."
          },
          "to": {
            "$ref": "#/components/schemas/AddressSchema",
            "description": "Address of the receiver. None when its a contract creation transaction."
          },
          "token_address": {
            "$ref": "#/components/schemas/AddressSchema",
            "description": "Token address created, or None if not a deployment."
          },
          "transaction_hash": {
            "$ref": "#/components/schemas/B256Schema",
            "description": "Transaction Hash."
          },
          "transaction_index": {
            "type": "integer",
            "format": "int64",
            "description": "Index within the block.",
            "minimum": 0
          }
        }
      },
      "TxPayload": {
        "oneOf": [
          {
            "type": "object",
            "description": "Create a new mint token. After the token is created, the\n`master_authority` of the token is initialized with the signer of the\nmessage.\n\nRefer to `TokenInstruction::CreateNewToken`.",
            "required": [
              "data",
              "transaction_type"
            ],
            "properties": {
              "data": {
                "type": "object",
                "description": "Create a new mint token. After the token is created, the\n`master_authority` of the token is initialized with the signer of the\nmessage.\n\nRefer to `TokenInstruction::CreateNewToken`.",
                "required": [
                  "symbol",
                  "decimals",
                  "master_authority"
                ],
                "properties": {
                  "decimals": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Number of base 10 digits to the right of the decimal place.",
                    "example": "18",
                    "minimum": 0
                  },
                  "master_authority": {
                    "$ref": "#/components/schemas/AddressSchema",
                    "description": "The master authority of the token."
                  },
                  "symbol": {
                    "type": "string",
                    "description": "The symbol of the token to create.",
                    "example": "USDX"
                  }
                }
              },
              "transaction_type": {
                "type": "string",
                "enum": [
                  "TokenCreate"
                ]
              }
            }
          },
          {
            "type": "object",
            "description": "Transfer tokens from one account to another. The signer of message must\nbe the owner of the source account. Otherwise the transaction may fail.\n\nRefer to `TokenInstruction::Transfer`.",
            "required": [
              "data",
              "transaction_type"
            ],
            "properties": {
              "data": {
                "type": "object",
                "description": "Transfer tokens from one account to another. The signer of message must\nbe the owner of the source account. Otherwise the transaction may fail.\n\nRefer to `TokenInstruction::Transfer`.",
                "required": [
                  "value",
                  "to",
                  "token"
                ],
                "properties": {
                  "to": {
                    "$ref": "#/components/schemas/AddressSchema",
                    "description": "The real recipient address."
                  },
                  "token": {
                    "$ref": "#/components/schemas/AddressSchema",
                    "description": "The token address, if it's native token, token address is `None`."
                  },
                  "value": {
                    "$ref": "#/components/schemas/U256Schema",
                    "description": "The amount of tokens to transfer."
                  }
                }
              },
              "transaction_type": {
                "type": "string",
                "enum": [
                  "TokenTransfer"
                ]
              }
            }
          },
          {
            "type": "object",
            "description": "Grant authority to another account. The signer of message must be the\nMint's `master_authority`. Otherwise the transaction may fail.\n\nRefer to `TokenInstruction::GrantAuthority`.",
            "required": [
              "data",
              "transaction_type"
            ],
            "properties": {
              "data": {
                "type": "object",
                "description": "Grant authority to another account. The signer of message must be the\nMint's `master_authority`. Otherwise the transaction may fail.\n\nRefer to `TokenInstruction::GrantAuthority`.",
                "required": [
                  "authority_type",
                  "new_authority",
                  "token"
                ],
                "properties": {
                  "authority_type": {
                    "type": "string",
                    "description": "The type of authority to update.",
                    "example": "master_authority"
                  },
                  "mint_tokens": {
                    "$ref": "#/components/schemas/U256Schema",
                    "description": "The amount of tokens to mint."
                  },
                  "new_authority": {
                    "$ref": "#/components/schemas/AddressSchema",
                    "description": "The new authority"
                  },
                  "token": {
                    "$ref": "#/components/schemas/AddressSchema",
                    "description": "The token address"
                  }
                }
              },
              "transaction_type": {
                "type": "string",
                "enum": [
                  "TokenGrantAuthority"
                ]
              }
            }
          },
          {
            "type": "object",
            "description": "Revoke authority to another account. The signer of message must be the\nMint's `master_authority`. Otherwise the transaction may fail.\n\nRefer to `TokenInstruction::RevokeAuthority`.",
            "required": [
              "data",
              "transaction_type"
            ],
            "properties": {
              "data": {
                "type": "object",
                "description": "Revoke authority to another account. The signer of message must be the\nMint's `master_authority`. Otherwise the transaction may fail.\n\nRefer to `TokenInstruction::RevokeAuthority`.",
                "required": [
                  "authority_type",
                  "new_authority",
                  "token"
                ],
                "properties": {
                  "authority_type": {
                    "type": "string",
                    "description": "The type of authority to update.",
                    "example": "master_authority"
                  },
                  "mint_tokens": {
                    "$ref": "#/components/schemas/U256Schema",
                    "description": "The amount of tokens to mint."
                  },
                  "new_authority": {
                    "$ref": "#/components/schemas/AddressSchema",
                    "description": "The new authority"
                  },
                  "token": {
                    "$ref": "#/components/schemas/AddressSchema",
                    "description": "The token address"
                  }
                }
              },
              "transaction_type": {
                "type": "string",
                "enum": [
                  "TokenRevokeAuthority"
                ]
              }
            }
          },
          {
            "type": "object",
            "description": "Add the account to the blacklisted accounts. The signer of message must\nbe the Mint's `blacklist_authority`. Otherwise the transaction may fail.\n\nRefer to `TokenInstruction::BlacklistAccount`.",
            "required": [
              "data",
              "transaction_type"
            ],
            "properties": {
              "data": {
                "type": "object",
                "description": "Add the account to the blacklisted accounts. The signer of message must\nbe the Mint's `blacklist_authority`. Otherwise the transaction may fail.\n\nRefer to `TokenInstruction::BlacklistAccount`.",
                "required": [
                  "address",
                  "token"
                ],
                "properties": {
                  "address": {
                    "$ref": "#/components/schemas/AddressSchema",
                    "description": "The account to blacklist"
                  },
                  "token": {
                    "$ref": "#/components/schemas/AddressSchema",
                    "description": "The token address"
                  }
                }
              },
              "transaction_type": {
                "type": "string",
                "enum": [
                  "TokenBlacklistAccount"
                ]
              }
            }
          },
          {
            "type": "object",
            "description": "Whitelist the a previously blacklisted account. The signer of message\nmust be the Mint's `blacklist_authority`. Otherwise the transaction may\nfail.\n\nRefer to `TokenInstruction::WhitelistAccount`.",
            "required": [
              "data",
              "transaction_type"
            ],
            "properties": {
              "data": {
                "type": "object",
                "description": "Whitelist the a previously blacklisted account. The signer of message\nmust be the Mint's `blacklist_authority`. Otherwise the transaction may\nfail.\n\nRefer to `TokenInstruction::WhitelistAccount`.",
                "required": [
                  "address",
                  "token"
                ],
                "properties": {
                  "address": {
                    "$ref": "#/components/schemas/AddressSchema",
                    "description": "The account to whitelist"
                  },
                  "token": {
                    "$ref": "#/components/schemas/AddressSchema",
                    "description": "The token address"
                  }
                }
              },
              "transaction_type": {
                "type": "string",
                "enum": [
                  "TokenWhitelistAccount"
                ]
              }
            }
          },
          {
            "type": "object",
            "description": "Mints new tokens to an account. The signer of the message must be Mint's\n`mint_authority`. Otherwise the transaction may fail.\n\nRefer to `TokenInstruction::MintTo`.",
            "required": [
              "data",
              "transaction_type"
            ],
            "properties": {
              "data": {
                "type": "object",
                "description": "Mints new tokens to an account. The signer of the message must be Mint's\n`mint_authority`. Otherwise the transaction may fail.\n\nRefer to `TokenInstruction::MintTo`.",
                "required": [
                  "value",
                  "address",
                  "token"
                ],
                "properties": {
                  "address": {
                    "$ref": "#/components/schemas/AddressSchema",
                    "description": "The address to mint the tokens to."
                  },
                  "token": {
                    "$ref": "#/components/schemas/AddressSchema",
                    "description": "The token address"
                  },
                  "value": {
                    "$ref": "#/components/schemas/U256Schema",
                    "description": "The amount of new tokens to mint."
                  }
                }
              },
              "transaction_type": {
                "type": "string",
                "enum": [
                  "TokenMint"
                ]
              }
            }
          },
          {
            "type": "object",
            "description": "Burns tokens by removing them from an account. The signer of the message\nmust be Mint's `mint_burn` authority. Otherwise the transaction may\nfail.\n\nRefer to `TokenInstruction::BurnFromAccount`.",
            "required": [
              "data",
              "transaction_type"
            ],
            "properties": {
              "data": {
                "type": "object",
                "description": "Burns tokens by removing them from an account. The signer of the message\nmust be Mint's `mint_burn` authority. Otherwise the transaction may\nfail.\n\nRefer to `TokenInstruction::BurnFromAccount`.",
                "required": [
                  "value",
                  "address",
                  "token"
                ],
                "properties": {
                  "address": {
                    "$ref": "#/components/schemas/AddressSchema",
                    "description": "The address to burn the tokens from."
                  },
                  "token": {
                    "$ref": "#/components/schemas/AddressSchema",
                    "description": "The token address"
                  },
                  "value": {
                    "$ref": "#/components/schemas/U256Schema",
                    "description": "The amount of tokens to burn."
                  }
                }
              },
              "transaction_type": {
                "type": "string",
                "enum": [
                  "TokenBurn"
                ]
              }
            }
          },
          {
            "type": "object",
            "description": "Close an account. Note that an account can be closed only if the token\nbalance is zero.\n\nRefer to `TokenInstruction::CloseAccount`.",
            "required": [
              "data",
              "transaction_type"
            ],
            "properties": {
              "data": {
                "type": "object",
                "description": "Close an account. Note that an account can be closed only if the token\nbalance is zero.\n\nRefer to `TokenInstruction::CloseAccount`.",
                "required": [
                  "token"
                ],
                "properties": {
                  "token": {
                    "$ref": "#/components/schemas/AddressSchema",
                    "description": "The token address"
                  }
                }
              },
              "transaction_type": {
                "type": "string",
                "enum": [
                  "TokenCloseAccount"
                ]
              }
            }
          },
          {
            "type": "object",
            "description": "Pause all transactions associated with the Mint. The signer of the\nmessage must be the Mint's `pause_authority`. Otherwise the\ntransaction may fail.\n\nRefer to `TokenInstruction::Pause`.",
            "required": [
              "data",
              "transaction_type"
            ],
            "properties": {
              "data": {
                "type": "object",
                "description": "Pause all transactions associated with the Mint. The signer of the\nmessage must be the Mint's `pause_authority`. Otherwise the\ntransaction may fail.\n\nRefer to `TokenInstruction::Pause`.",
                "required": [
                  "token"
                ],
                "properties": {
                  "token": {
                    "$ref": "#/components/schemas/AddressSchema",
                    "description": "The token address"
                  }
                }
              },
              "transaction_type": {
                "type": "string",
                "enum": [
                  "TokenPause"
                ]
              }
            }
          },
          {
            "type": "object",
            "description": "Unpause transactions for the Mint. The signer of the message must be the\nMint's `pause_authority`. Otherwise the transaction may fail.\n\nRefer to `TokenInstruction::Unpause`.",
            "required": [
              "data",
              "transaction_type"
            ],
            "properties": {
              "data": {
                "type": "object",
                "description": "Unpause transactions for the Mint. The signer of the message must be the\nMint's `pause_authority`. Otherwise the transaction may fail.\n\nRefer to `TokenInstruction::Unpause`.",
                "required": [
                  "token"
                ],
                "properties": {
                  "token": {
                    "$ref": "#/components/schemas/AddressSchema",
                    "description": "The token address"
                  }
                }
              },
              "transaction_type": {
                "type": "string",
                "enum": [
                  "TokenUnpause"
                ]
              }
            }
          },
          {
            "type": "object",
            "description": "Update token metadata. The signer of the message must be the Mint's\n`metadata_update_authority`. Otherwise the transaction may fail.\n\nRefer to `TokenInstruction::UpdateMetadata`.",
            "required": [
              "data",
              "transaction_type"
            ],
            "properties": {
              "data": {
                "type": "object",
                "description": "Update token metadata. The signer of the message must be the Mint's\n`metadata_update_authority`. Otherwise the transaction may fail.\n\nRefer to `TokenInstruction::UpdateMetadata`.",
                "required": [
                  "metadata",
                  "token"
                ],
                "properties": {
                  "metadata": {
                    "$ref": "#/components/schemas/TokenMetadata",
                    "description": "The metadata to update"
                  },
                  "token": {
                    "$ref": "#/components/schemas/AddressSchema",
                    "description": "The token address"
                  }
                }
              },
              "transaction_type": {
                "type": "string",
                "enum": [
                  "TokenUpdateMetadata"
                ]
              }
            }
          },
          {
            "type": "object",
            "description": "Raw transaction data, all unsupported instructions are encoded as raw\ndata.\n\nThis variant is used for all instructions that are not supported by the\ncurrent version of the RPC. Just for compatibility.",
            "required": [
              "data",
              "transaction_type"
            ],
            "properties": {
              "data": {
                "type": "object",
                "description": "Raw transaction data, all unsupported instructions are encoded as raw\ndata.\n\nThis variant is used for all instructions that are not supported by the\ncurrent version of the RPC. Just for compatibility.",
                "required": [
                  "input",
                  "token"
                ],
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/BytesSchema",
                    "description": "The input data of the transaction."
                  },
                  "token": {
                    "$ref": "#/components/schemas/AddressSchema",
                    "description": "The token address"
                  }
                }
              },
              "transaction_type": {
                "type": "string",
                "enum": [
                  "Raw"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "transaction_type"
            ],
            "properties": {
              "transaction_type": {
                "type": "string",
                "enum": [
                  "Cancellation"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "transaction_type"
            ],
            "properties": {
              "transaction_type": {
                "type": "string",
                "enum": [
                  "Recovery"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "transaction_type"
            ],
            "properties": {
              "transaction_type": {
                "type": "string",
                "enum": [
                  "Governance"
                ]
              }
            }
          }
        ],
        "description": "Instructions supported by mint token"
      },
      "U256Schema": {
        "type": "string",
        "title": "string",
        "example": "1500000000"
      }
    }
  },
  "tags": [
    {
      "name": "accounts",
      "description": "Accounts API"
    },
    {
      "name": "tokens",
      "description": "Tokens API"
    },
    {
      "name": "checkpoints",
      "description": "Checkpoints API"
    },
    {
      "name": "transactions",
      "description": "Transactions API"
    }
  ]
}